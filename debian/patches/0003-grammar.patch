From: "Barak A. Pearlmutter" <barak+git@pearlmutter.net>
Date: Thu, 6 Jun 2019 13:36:46 +0100
Subject: grammar

---
 src/mlpack/core/util/sfinae_utility.hpp | 8 ++++----
 src/mlpack/methods/kde/kde_main.cpp     | 2 +-
 2 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/src/mlpack/core/util/sfinae_utility.hpp b/src/mlpack/core/util/sfinae_utility.hpp
index 5164af6..bbd69df 100644
--- a/src/mlpack/core/util/sfinae_utility.hpp
+++ b/src/mlpack/core/util/sfinae_utility.hpp
@@ -220,7 +220,7 @@ struct NAME                                                                  \
 #define SINGLE_ARG(...) __VA_ARGS__
 
 /**
- * HAS_METHOD_FORM generates a template that allows to check at compile time
+ * HAS_METHOD_FORM generates a template that allows a compile time check for
  * whether a given class has a method of the requested form. For example, for
  * the following class
  *
@@ -254,8 +254,8 @@ struct NAME                                                                  \
     HAS_METHOD_FORM_BASE(SINGLE_ARG(METHOD), SINGLE_ARG(NAME), 7)
 
 /**
- * HAS_EXACT_METHOD_FORM generates a template that allows to check at compile
- * time whether a given class has a method of the requested form. For example,
+ * HAS_EXACT_METHOD_FORM generates a template that allows a compile time check
+ * whether a given class has a method of the requested form. For example,
  * for the following class
  *
  * class A
@@ -291,7 +291,7 @@ struct NAME                                                                  \
  * A version of HAS_METHOD_FORM() where the maximum number of extra arguments is
  * set to the default of 7.
  *
- * HAS_METHOD_FORM generates a template that allows to check at compile time
+ * HAS_METHOD_FORM generates a template that allows a compile time check as to
  * whether a given class has a method of the requested form. For example, for
  * the following class
  *
diff --git a/src/mlpack/methods/kde/kde_main.cpp b/src/mlpack/methods/kde/kde_main.cpp
index 058ca68..4bb8818 100644
--- a/src/mlpack/methods/kde/kde_main.cpp
+++ b/src/mlpack/methods/kde/kde_main.cpp
@@ -37,7 +37,7 @@ PROGRAM_INFO("Kernel Density Estimation",
     "performance as it uses an approximate dual or single tree algorithm for "
     "acceleration."
     "\n\n"
-    "Dual or single tree optimization allows to avoid lots of barely relevant "
+    "Dual or single tree optimization allows one to avoid lots of barely relevant "
     "calculations (as kernel function values decrease with distance), so it is "
     "an approximate computation. You can specify the maximum relative error "
     "tolerance for each query value with " + PRINT_PARAM_STRING("rel_error") +
